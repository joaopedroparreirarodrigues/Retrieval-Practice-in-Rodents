<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.6.3"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>VideoAcquisition</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FileCapture">
                <cv:FileName>2.avi</cv:FileName>
                <cv:PlaybackRate>8</cv:PlaybackRate>
                <cv:StartPosition>250</cv:StartPosition>
                <cv:PositionUnits>Frames</cv:PositionUnits>
                <cv:Loop>false</cv:Loop>
                <cv:Playing>true</cv:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Crop">
                <cv:RegionOfInterest>
                  <cv:X>78</cv:X>
                  <cv:Y>33</cv:Y>
                  <cv:Width>532</cv:Width>
                  <cv:Height>434</cv:Height>
                </cv:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="PublishSubject">
              <Name>Testing_effect</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Testing_effect</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>78</cv:X>
                <cv:Y>46</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>257</cv:X>
                <cv:Y>183</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>230</cv:X>
                <cv:Y>217</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>52</cv:X>
                <cv:Y>80</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZero</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>0</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>Left</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>46</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>ToZeroInv</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:MorphologicalOperator">
                <cv:Size>
                  <cv:Width>3</cv:Width>
                  <cv:Height>3</cv:Height>
                </cv:Size>
                <cv:Anchor>
                  <cv:X>-1</cv:X>
                  <cv:Y>-1</cv:Y>
                </cv:Anchor>
                <cv:Shape>Ellipse</cv:Shape>
                <cv:Iterations>2</cv:Iterations>
                <cv:Operation>Dilate</cv:Operation>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>ConnectedComponent</cv:Mode>
                <cv:Method>ChainApproxSimple</cv:Method>
                <cv:Offset>
                  <cv:X>2</cv:X>
                  <cv:Y>2</cv:Y>
                </cv:Offset>
                <cv:MinArea>500</cv:MinArea>
                <cv:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Centroid</Selector>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>from System import Math, Single

@returns(float)
def process(value):
  if Single.IsNaN(value.X) or Single.IsNaN(value.Y):
    return 0
  return 1</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NotEqual">
        <Operand xsi:type="DoubleProperty">
          <Value>0</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Convert the bool output to int</scr:Name>
        <scr:Description>This way we can count how much the mouse was in each arm </scr:Description>
        <scr:Script>@returns(int)
def process(value):
  x = value
  return int(x)</scr:Script>
      </Expression>
      <Expression xsi:type="rx:Accumulate" />
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>
def process(value):
  max_time = 100
  cutoff = max_time * 47/100 #85% of the whole trial
  completed = False

  if value == cutoff:
    completed = True
    return value, completed
  return value, completed</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>231</cv:X>
                <cv:Y>221</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>90</cv:X>
                <cv:Y>398</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>123</cv:X>
                <cv:Y>428</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>265</cv:X>
                <cv:Y>248</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZero</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>0</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>Down</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>46</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>ToZeroInv</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:MorphologicalOperator">
                <cv:Size>
                  <cv:Width>3</cv:Width>
                  <cv:Height>3</cv:Height>
                </cv:Size>
                <cv:Anchor>
                  <cv:X>-1</cv:X>
                  <cv:Y>-1</cv:Y>
                </cv:Anchor>
                <cv:Shape>Ellipse</cv:Shape>
                <cv:Iterations>2</cv:Iterations>
                <cv:Operation>Dilate</cv:Operation>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>ConnectedComponent</cv:Mode>
                <cv:Method>ChainApproxSimple</cv:Method>
                <cv:Offset>
                  <cv:X>2</cv:X>
                  <cv:Y>2</cv:Y>
                </cv:Offset>
                <cv:MinArea>500</cv:MinArea>
                <cv:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Centroid</Selector>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>from System import Math, Single

@returns(float)
def process(value):
  if Single.IsNaN(value.X) or Single.IsNaN(value.Y):
    return 0
  return 1</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NotEqual">
        <Operand xsi:type="DoubleProperty">
          <Value>0</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Convert the bool output to int</scr:Name>
        <scr:Description>This way we can count how much the mouse was in each arm </scr:Description>
        <scr:Script>@returns(int)
def process(value):
  x = value
  return int(x)</scr:Script>
      </Expression>
      <Expression xsi:type="rx:Accumulate" />
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>
def process(value):
  max_time = 100
  cutoff = max_time * 47/100 #85% of the whole trial
  completed = False

  if value == cutoff:
    completed = True
    return value, completed
  return value, completed</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>298</cv:X>
                <cv:Y>212</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>487</cv:X>
                <cv:Y>356</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>458</cv:X>
                <cv:Y>394</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>270</cv:X>
                <cv:Y>248</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZero</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>0</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>Right</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>46</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>ToZeroInv</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:MorphologicalOperator">
                <cv:Size>
                  <cv:Width>3</cv:Width>
                  <cv:Height>3</cv:Height>
                </cv:Size>
                <cv:Anchor>
                  <cv:X>-1</cv:X>
                  <cv:Y>-1</cv:Y>
                </cv:Anchor>
                <cv:Shape>Ellipse</cv:Shape>
                <cv:Iterations>2</cv:Iterations>
                <cv:Operation>Dilate</cv:Operation>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>ConnectedComponent</cv:Mode>
                <cv:Method>ChainApproxSimple</cv:Method>
                <cv:Offset>
                  <cv:X>2</cv:X>
                  <cv:Y>2</cv:Y>
                </cv:Offset>
                <cv:MinArea>500</cv:MinArea>
                <cv:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Centroid</Selector>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>from System import Math, Single

@returns(float)
def process(value):
  if Single.IsNaN(value.X) or Single.IsNaN(value.Y):
    return 0
  return 1</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NotEqual">
        <Operand xsi:type="DoubleProperty">
          <Value>0</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Convert the bool output to int</scr:Name>
        <scr:Description>This way we can count how much the mouse was in each arm </scr:Description>
        <scr:Script>@returns(int)
def process(value):
  x = value
  return int(x)</scr:Script>
      </Expression>
      <Expression xsi:type="rx:Accumulate" />
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>
def process(value):
  max_time = 100
  cutoff = max_time * 47/100 #85% of the whole trial
  completed = False

  if value == cutoff:
    completed = True
    return value, completed
  return value, completed</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Return True when 85%</scr:Name>
        <scr:Script>@returns(tuple)
def process(value):
  left, down, right = value
  if left[1]:
    return 1, 'left'
  elif down[1]:
    return 1, 'down'
  elif right[1]:
    return 1, 'right'
  else:
    return 0, 'not_completed'</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Distinct" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Returns the arm as a string</scr:Name>
        <scr:Script>@returns(str)
def process(value):
  completed = value[0]
  arm = value[1]
  
  return arm</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:SerialStringWrite">
          <io:PortName>COM1</io:PortName>
          <io:NewLine>\r\n</io:NewLine>
        </Combinator>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>Returns the status as a bool</scr:Name>
        <scr:Script>@returns(str)
def process(value):
  if value[0] == 1:
    return "%"
  else:
    return "empty"</scr:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:SerialStringWrite">
          <io:PortName>COM1</io:PortName>
          <io:NewLine>\r\n</io:NewLine>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:SerialStringRead">
          <io:PortName>COM1</io:PortName>
          <io:NewLine>\n</io:NewLine>
        </Combinator>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>@returns(int)
def process(value):
  if value:
    return int(value)
  else:
    return 0</scr:Script>
      </Expression>
      <Expression xsi:type="rx:Accumulate" />
    </Nodes>
    <Edges>
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="1" To="8" Label="Source1" />
      <Edge From="1" To="14" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="20" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="20" Label="Source2" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="18" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="20" Label="Source3" />
      <Edge From="20" To="21" Label="Source1" />
      <Edge From="21" To="22" Label="Source1" />
      <Edge From="21" To="25" Label="Source1" />
      <Edge From="22" To="23" Label="Source1" />
      <Edge From="23" To="24" Label="Source1" />
      <Edge From="25" To="26" Label="Source1" />
      <Edge From="27" To="28" Label="Source1" />
      <Edge From="28" To="29" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>